module DAL {
    module SQLExceptions {
        exception SQLConnectionError {
        string reason;
        };
        exception SQLUpdateError {
        string reason;
        };
        exception SQLCreateError {
        string reason;
        };
        exception SQLDeleteError {
        string reason;
        };
        exception SQLRetrieveError{
        string reason;
        };
    };
    module DALUtil {
        interface DatabaseUtil {
            string getConnection() raises (SQLExceptions::SQLConnectionError);
            void closeConnection() raises (SQLExceptions::SQLConnectionError);
        };
    };

    module DALGameDetail {
        struct GameDetail {
            long playerID;
            long lobbyID;
            long totalPoints;
        };



        interface GameDetailsDAL {
            void insertNewGameDetail(in long playerID, in long lobbyID, in long totalPoints) raises (SQLExceptions::SQLCreateError);
            GameDetail getGameDetailByID(in long lobbyID) raises (SQLExceptions::SQLRetrieveError);
        };
    };

    module DALLeaderBoard {
        struct Leaderboard {
            long leaderboardID;
            long userID;
            long totalPoints;
        };

        interface LeaderboardDAL {
            void insertNewLeaderboard(in long userID, in long totalPoints) raises (SQLExceptions::SQLCreateError);
            Leaderboard getLeaderboardByID(in long leaderboardID) raises (SQLExceptions::SQLRetrieveError);
        };
    };

    module DALLobby {
        struct Lobby {
            string lobbyId;
            string createdBy;
            string winner;
        };

        interface LobbyDAL {
            void insertNewLobby(in long lobbyId, in string createdBy, in string winner) raises (SQLExceptions::SQLCreateError);
            Lobby getLobbyByID(in long lobbyId) raises (SQLExceptions::SQLRetrieveError);
        };
    };

    module DALPlayer {
        struct Player {
            long id;
            string name;
            string password;
            string lastLogin;
        };

        interface PlayerDAL {
            void insertNewPlayer(in string username, in string password, in string lastLogin) raises (SQLExceptions::SQLCreateError);
            Player getPlayerByID(in long playerID) raises (SQLExceptions::SQLRetrieveError);
            void updatePassword(in long playerID, in string newPassword) raises (SQLExceptions::SQLUpdateError);
            void updateUsername(in long playerID, in string newUsername) raises (SQLExceptions::SQLUpdateError);
            void deletePlayer(in long playerID) raises (SQLExceptions::SQLDeleteError);
        };
    };

};
