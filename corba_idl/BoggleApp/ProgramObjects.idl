module org {
    module amalgam {
        module Utils {
            module ObjectExceptions {
                exception DuplicatePlayerIDException {
                    string reason;
                };

                exception InvalidPlayerDataException {
                    string reason;
                };

                exception SQLError {
                    string reason;
                };

                exception InvalidNameException {
                    string reason;
                };

                exception InvalidPasswordException {
                    string reason;
                };

                exception UpdateLastLoginException {
                    string reason;
                };

                exception InvalidPointsException {
                    string reason;
                };

                exception PlayerAlreadyInRoom {
                    string reason;
                };

                exception LobbyIDRetrievalException {
                    string reason;
                };

                exception CreatedByRetrievalException {
                    string reason;
                };

                exception CloseLobbyException {
                    string reason;
                };

                exception PlayerDoesNotExistException {
                    string reason;
                };

                exception LobbyDoesNotExistException {
                    string reason;
                };

                exception RoomDoesNotExistException {
                    string reason;
                };

                exception PlayerListRetrievalException {
                    string reason;
                };

                exception LeaderboardIDRetrievalException {
                    string reason;
                };
            };

            module Objects {
                interface Player {
                    attribute long id;
                    attribute string name;
                    attribute string password;
                    attribute string lastLogin;

                    void addPlayer(in Player player) raises (ObjectExceptions::DuplicatePlayerIDException, ObjectExceptions::InvalidPlayerDataException, ObjectExceptions::SQLError);
                    void updateName(in string newName) raises (ObjectExceptions::InvalidNameException, ObjectExceptions::SQLError);
                    void updatePassword(in string newPassword) raises (ObjectExceptions::InvalidPasswordException, ObjectExceptions::SQLError);
                    void updateLastLogin(in string newTime) raises (ObjectExceptions::UpdateLastLoginException, ObjectExceptions::SQLError);
                    void deletePlayer(in long id) raises (ObjectExceptions::PlayerDoesNotExistException);
                };

                interface GameDetail {
                    attribute long playerID;
                    attribute long lobbyID;
                    attribute long totalPoints;

                    void updateTotalPoints(in long newPoints) raises (ObjectExceptions::InvalidPointsException, ObjectExceptions::SQLError);
                    long getPlayerID() raises (ObjectExceptions::PlayerDoesNotExistException);
                    long getLobbyID() raises (ObjectExceptions::LobbyDoesNotExistException);
                };

                interface GameRoom {
                    attribute long roomID;
                    typedef sequence<string> PlayersList;
                    attribute PlayersList players;

                    void addPlayer(in string playerName) raises (ObjectExceptions::PlayerAlreadyInRoom, ObjectExceptions::SQLError);
                    long getRoomID() raises (ObjectExceptions::RoomDoesNotExistException);
                    typedef sequence<string> list;
                    list getPlayers() raises (ObjectExceptions::PlayerListRetrievalException);
                };

                interface Lobby {
                    attribute long lobbyID;
                    attribute string createdBy;
                    attribute string winner;

                    void updateWinner(in string winnerName) raises (ObjectExceptions::InvalidNameException, ObjectExceptions::PlayerDoesNotExistException, ObjectExceptions::SQLError);
                    void closeLobby() raises (ObjectExceptions::LobbyDoesNotExistException, ObjectExceptions::CloseLobbyException, ObjectExceptions::SQLError);
                    long getLobbyID() raises (ObjectExceptions::LobbyIDRetrievalException);
                    string getCreatedBy() raises (ObjectExceptions::CreatedByRetrievalException);
                };

                interface Leaderboard {
                    attribute long leaderboardID;
                    attribute long playerID;
                    attribute long totalPoints;

                    void updateTotalPoints(in long newPoints) raises (ObjectExceptions::InvalidPointsException, ObjectExceptions::SQLError);
                    long getPlayerID() raises (ObjectExceptions::PlayerDoesNotExistException);
                    long getLeaderboardID() raises (ObjectExceptions::LeaderboardIDRetrievalException);
                };
            };
             module CallbackException {
                exception InvalidRequestException {
                    string reason;
                };
            };
             module Callback {
                 interface PlayerCallback {

                    typedef org::amalgam::Utils::Objects::Player Player;

                    void uiCall(in long lobbyId)
                        raises (CallbackException::InvalidRequestException);

                    // For deletion
                    void setUser(in org::amalgam::Utils::Objects::Player player, in long lobbyId)
                        raises (CallbackException::InvalidRequestException);

                    // For deletion
                    org::amalgam::Utils::Objects::Player getPlayer(in long lobbyId)
                        raises (CallbackException::InvalidRequestException);
                 };
             };
        };
    };
};
