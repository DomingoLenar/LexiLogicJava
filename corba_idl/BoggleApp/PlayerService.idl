module Service {

    module PlayerExceptions {
        exception AlreadyLoggedIn {
            string message;
        };

        exception InvalidCredentials {
            string message;
        };

        exception InvalidRequest {
            string message;
        };

        exception InvalidWord {
            string message;
        };

        exception NoPlayersAvailable {
            string message;
        };

        exception NotLoggedIn {
            string message;
        };

        exception ObjectExistence {
            string message;
        };

        exception UserExistenceException {
            string message;
        };

        exception ChangeUsernameFailed {
            string reason;
        };

        exception ChangePasswordFailed {
            string reason;
        };

        exception DeleteAccountFailed {
            string reason;
        };

        exception SubmitWordFailed {
            string reason;
        };

        exception StartGameFailed {
            string reason;
        };


        exception GameHistoryUnavailable {
            string reason;
        };

        exception GameResultUnavailable {
            string reason;
        };

        exception InGameException {
            string reason;
        };
    };

    module Player {
        interface PlayerCallback;

        interface PlayerService {
            struct Player {
                long id;
                string name;
                string password;
                string lastLogin;
            };

            void login(in PlayerCallback player_callback)
                raises (PlayerExceptions::AlreadyLoggedIn, PlayerExceptions::InvalidCredentials, PlayerExceptions::UserExistenceException);

            void logout()
                raises (PlayerExceptions::NotLoggedIn);

            void changeUsername(in string username, in string newUsername)
                raises (PlayerExceptions::ChangeUsernameFailed);

            void changePassword(in string username, in string newPassword)
                raises (PlayerExceptions::ChangePasswordFailed);

            void deleteAccount(in string username)
                raises (PlayerExceptions::DeleteAccountFailed);

            void submitWord(in string word, in string username)
                raises (PlayerExceptions::SubmitWordFailed);

            void startGame(in string username)
                raises (PlayerExceptions::StartGameFailed, PlayerExceptions::InGameException);

            void getGameResult() // To be discussed
                raises (PlayerExceptions::GameResultUnavailable, PlayerExceptions::InGameException);

            void getGameHistory() // To be discussed
                raises (PlayerExceptions::GameHistoryUnavailable, PlayerExceptions::InGameException);
        };

        interface PlayerCallback {
            void uiCall()
                raises (PlayerExceptions::InvalidRequest);

            void setUser(in PlayerService::Player player)
                raises (PlayerExceptions::InvalidRequest);

            typedef PlayerService::Player player;
            player getPlayer()
                raises (PlayerExceptions::InvalidRequest);
        };

        interface ControllerInterface {
           void setObjectsUser (in string objects)
                 raises (PlayerExceptions::InvalidRequest, PlayerExceptions::UserExistenceException);

           void fetchAndUpdate()
                raises (PlayerExceptions::InvalidRequest);
        };
    };
};
